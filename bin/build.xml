<?xml version="1.0" encoding="UTF-8"?>
<project name="Build-Culgi" default="help" basedir="../">

    <!--
        Culgi Build file.
        This file contains all build workflow steps necessary to create a CI setup for the Culgi project.
    -->

    <!-- set the operating system properties -->
    <condition property="build.os" value="mac">

        <os family="mac" />
    </condition>

    <condition property="build.os" value="windows">

        <os family="windows" />
    </condition>

    <condition property="build.os" value="linux">

        <and>

            <os family="unix"/>
            <not>

                <os family="mac"/>
            </not>
        </and>
    </condition>

    <!-- Include os specific build properties file. -->

    <property file="config/${build.os}/dev/build.properties" />

    <!-- Figure out what build system we will be using -->

    <condition property="use.unix-make">

        <contains string="${cmake.generator}" substring="Makefiles" />
    </condition>

    <condition property="use.vs">

        <contains string="${cmake.generator}" substring="Visual Studio" />
    </condition>

    <condition property="use.xcode">

        <contains string="${cmake.generator}" substring="Xcode" />
    </condition>

    <!--
        Help target.
        Shows the general tasks available.
    -->
    <target name="help" description="Show this menu.">

        <java classname="org.apache.tools.ant.Main">
            <arg value="-projecthelp"/>
        </java>
    </target>

    <!--
        Build target.
        Runs through complete workflow to create a releasable product.
    -->
    <target name="build" description="Build project." depends="prepare,configure,make,test,tools-parallel" />

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="${cmake.cores}">
            <antcall target="doxygen"/>
            <sequential>
                <antcall target="make-install"/>
                <antcall target="package"/>
            </sequential>
        </parallel>
    </target>

    <!--
        Prepare target.
        Cleans out the build folder and bootstraps the cmake cache file.
    -->
    <target name="prepare" description="Prepare files and folders." depends="log,clean,bootstrap" />

    <target name="log">

        <!-- Create build directories -->
        <mkdir dir="${dir.log}"/>

        <record name="${dir.log}/${log.file}" loglevel="${log.level}" />

        <echo message="os type      : ${os.name}" />
        <echo message="os arch      : ${os.arch}" />
        <echo message="os version   : ${os.version}" />
        <echo message="build system : ${cmake.generator}" />
        <echo message="build type   : ${cmake.build.type}" />
        <echo message="build dir    : ${dir.build}" />
        <echo message="data dir     : ${dir.data}" />
    	<echo message="doc dir      : ${dir.doc}" />
        <echo message="log dir      : ${dir.log}" />
        <echo message="scripts dir  : ${dir.scripts}" />
        <echo message="workspace dir      : ${dir.workspace}" />
    </target>

    <target name="clean">

        <!-- Flush build directories -->
        <delete dir="${dir.build}/${build.os}/dev"/>

        <!-- Create build directories -->
        <mkdir dir="${dir.build}/${build.os}/dev"/>

        <!-- Flush build directories -->
        <delete dir="${dir.tmp}/build/${os.name}"/>

        <!-- Create build directories -->
        <mkdir dir="${dir.tmp}/build/${os.name}"/>
        <mkdir dir="${dir.tmp}/build/${os.name}/api"/>
        <mkdir dir="${dir.tmp}/build/${os.name}/logs"/>
        <mkdir dir="${dir.tmp}/build/${os.name}/install"/>
        <mkdir dir="${dir.tmp}/build/${os.name}/release"/>
    </target>

    <target name="bootstrap" depends="bootstrap-unixmake,bootstrap-vs,bootstrap-xcode">

        <!-- Copy cmake cache file -->
        <copy file="${cmake.cache.file}" todir="${dir.build}/${build.os}/dev" />
    </target>

    <target name="bootstrap-unixmake" if="use.unix-make" />

    <target name="bootstrap-vs" if="use.vs">

        <!-- Create build directories -->
        <mkdir dir="${dir.data}/dll"/>
        <mkdir dir="${dir.data}/dll/${cmake.build.type}"/>

        <!-- harvest dll files -->
        <copy toDir="${dir.data}/dll/${cmake.build.type}">
            <fileset dir="${dir.dll.cmin}">
                <include name="**/*.dll" />
            </fileset>
            <fileset dir="${dir.dll.fftw}">
                <include name="**/*.dll" />
            </fileset>
            <fileset dir="${dir.dll.glew}">
                <include name="**/*.dll" />
            </fileset>
            <fileset dir="${dir.dll.qt}">
                <include name="**/*.dll" />
            </fileset>
            <fileset dir="${dir.dll.qwt}">
                <include name="**/*.dll" />
            </fileset>
            <fileset dir="${dir.dll.rlm}">
                <include name="**/*.dll" />
            </fileset>
            <fileset dir="${dir.dll.ssl}">
                <include name="**/*.dll" />
            </fileset>
            <fileset dir="${dir.dll.vtk}">
                <include name="**/*.dll" />
            </fileset>
        </copy>
    </target>

    <target name="bootstrap-xcode" if="use.xcode" />

    <!--
        Configure target.
        Generate platform specific make files.
    -->
    <target name="configure" description="Configure Culgi using cmake.">

        <!-- configure project -->
        <exec dir="${dir.build}/${build.os}/dev" executable="${cmake.bin}" failonerror="true">
            <arg value="-G${cmake.generator}"/>
            <arg value="${dir.workspace}"/>
        </exec>
    </target>

    <!--
        Make target.
        Build Culgi in a platform appropriate way.
    -->
    <target name="make" description="Compile Culgi." depends="make-unixmake,make-vs,make-xcode" />

    <target name="make-unixmake" if="use.unix-make">

        <!-- build project -->
        <exec dir="${dir.build}/${build.os}/dev" executable="make" failonerror="true">
            <arg value="-i"/>
            <arg value="-j${cmake.cores}"/>
        </exec>
    </target>

    <target name="make-vs" if="use.vs">

        <!-- build project -->
        <antcall target="run-vs">
            <param name="target" value="ALL_BUILD"/>
        </antcall>
    </target>

    <target name="make-xcode" if="use.xcode">

        <!-- build project -->
        <antcall target="run-xcode">
            <param name="target" value="ALL_BUILD"/>
        </antcall>
    </target>

    <!--
        Test target.
        Run test suite for Attgenie.
    -->
    <target name="test" description="Testing of Attgenie." depends="test-unixmake,test-vs,test-xcode" />

    <target name="test-unixmake" if="use.unix-make">

        <!-- test project -->
        <exec dir="${dir.build}/${build.os}/dev" executable="make" failonerror="true">
            <arg value="test"/>
        </exec>
    </target>

    <target name="test-vs" if="use.vs">

        <!-- test project -->
        <antcall target="run-vs">
            <param name="target" value="RUN_TESTS"/>
        </antcall>
    </target>

    <target name="test-xcode" if="use.xcode">

        <!-- test project -->
        <antcall target="run-xcode">
            <param name="target" value="RUN_TESTS"/>
        </antcall>
    </target>

    <!--
        Doxygen target.
        Create documentation for project.
    -->
    <target name="doxygen" description="doxygening of project." depends="doxygen-unixmake,doxygen-vs,doxygen-xcode" />

    <target name="doxygen-unixmake" if="use.unix-make">

        <!-- create documentation -->
        <exec dir="${dir.tmp}/build/${os.name}" executable="make" failonerror="true">
            <arg value="doxygen"/>
        </exec>
    </target>

    <target name="doxygen-vs" if="use.vs">

        <!-- create documentation -->
        <antcall target="run-vs">
            <param name="target" value="doxygen"/>
        </antcall>
    </target>

    <target name="doxygen-xcode" if="use.xcode">

        <!-- create documentation -->
        <antcall target="run-xcode">
            <param name="target" value="doxygen"/>
        </antcall>
    </target>

    <!--
        Make install target.
        Install Culgi from compiled code.
    -->
    <target name="make-install" description="Install of Culgi." depends="make-install-unixmake,make-install-vs,make-install-xcode" />

    <target name="make-install-unixmake" if="use.unix-make">

        <!-- install project -->
        <exec dir="${dir.build}/${build.os}/dev" executable="make" failonerror="true">
            <arg value="install"/>
        </exec>
    </target>

    <target name="make-install-vs" if="use.vs">

        <!-- install project -->
        <antcall target="run-vs">
            <param name="target" value="INSTALL"/>
        </antcall>
    </target>

    <target name="make-install-xcode" if="use.xcode">

        <!-- install project -->
        <antcall target="run-xcode">
            <param name="target" value="install"/>
        </antcall>
    </target>

    <!--
        Package target.
        Create platform specific installer for Culgi from compiled code.
    -->
    <target name="package" description="Install of Attgenie." depends="package-unixmake,package-vs,package-xcode" />

    <target name="package-unixmake" if="use.unix-make">

        <!-- package project -->
        <exec dir="${dir.build}/${build.os}/dev" executable="make" failonerror="true">
            <arg value="package"/>
        </exec>
    </target>

    <target name="package-vs" if="use.vs">

        <!-- package project -->
        <antcall target="run-vs">
            <param name="target" value="PACKAGE"/>
        </antcall>
    </target>

    <target name="package-xcode" if="use.xcode">

        <!-- package project -->
        <antcall target="run-xcode">
            <param name="target" value="package"/>
        </antcall>
    </target>

    <target name="run-vs" if="use.vs">

        <exec dir="${dir.build}/${build.os}/dev" executable="${dir.scripts}/run-vs.bat" failonerror="true">
            <arg value="${vs.bin}"/>
            <arg value="${cmake.project.name}"/>
            <arg value="${cmake.build.type}"/>
            <arg value="${target}"/>
        </exec>
    </target>

    <target name="run-xcode" if="use.xcode">

        <exec dir="${dir.build}/${build.os}/dev" executable="${dir.scripts}/run-xcode.sh" failonerror="true">
            <arg value="${cmake.build.type}"/>
            <arg value="${target}"/>
            <arg value="${cmake.cores}"/>
        </exec>
    </target>
</project>